import os
import sys
import time
import uvicorn
import warnings

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞
print("\n" + "=" * 80)
print(f"XTTS Server Startup - {time.strftime('%Y-%m-%d %H:%M:%S')}")
print("=" * 80)

print("[1/4] –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏...")
import tracemalloc
tracemalloc.start()
print("      ‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π torch
print("[2/4] –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π...")
warnings.filterwarnings("ignore", message=".*_register_pytree_node.*")
warnings.filterwarnings("ignore", message=".*weights_only=False.*")
print("      ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∞–≤–ª–µ–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print("[3/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
try:
    import torch
    gpu_available = torch.cuda.is_available()
    print(f"      ‚úÖ PyTorch: {torch.__version__} (GPU {'–¥–æ—Å—Ç—É–ø–µ–Ω üöÄ' if gpu_available else '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω üê¢'})")
    
    import fastapi
    print(f"      ‚úÖ FastAPI: {fastapi.__version__}")
    
    from TTS.tts.models.xtts import Xtts
    print("      ‚úÖ XTTS –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
except ImportError as e:
    print(f"     ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    print("\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("pip install -r requirements.txt")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
print("[4/4] –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
port = int(os.environ.get("PORT", 8000))
host = os.environ.get("HOST", "0.0.0.0")
reload_mode = os.environ.get("RELOAD", "true").lower() in ("true", "1", "t")
workers = int(os.environ.get("WORKERS", 1))
log_level = os.environ.get("LOG_LEVEL", "info")

print(f"      ‚úÖ –•–æ—Å—Ç: {host}")
print(f"      ‚úÖ –ü–æ—Ä—Ç: {port}")
print(f"      ‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if reload_mode else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
print(f"      ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {workers}")
print(f"      ‚úÖ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
print("[5/5] –ó–∞–ø—É—Å–∫ XTTS —Å–µ—Ä–≤–µ—Ä–∞...")
print("\n–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
print("–î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(
        "main:app",
        host=host,
        port=port,
        reload=reload_mode,
        workers=workers,
        log_level=log_level
    )
    server = uvicorn.Server(config)
    server.run()